#!/usr/bin/env python3
import os, sys
import json
import element

GAME_MODE_AUTO        = 1
GAME_MODE_BERSERK     = 2

CUBE_DEPTH = 7
#GAME_START_MODE = MODE_BERSERK
GAME_START_MODE = GAME_MODE_AUTO

CONFIG_FILE = "config_v4.json"

#######################################################################################################################################
REMOTE_URL = "https://epam-botchallenge.com/codenjoy-contest/board/player/???????????????????????????????????????????????????????????"
#######################################################################################################################################


DEBUG = False
#DEBUG = True

TESTFILE = None
#TESTFILE = "test.txt"

LOGFILENAME="log.txt"

QT_BOARD_SHOW = True
#QT_BOARD_SHOW = False

GLOBAL_BOARDS_FILE = "global_boards.txt"
if not DEBUG:
    TESTFILE = None
    LOGFNAME = None
    #QT_BOARD_SHOW = False

def PASS():
    pass

def ASSERT():
    BREAK

BREAK = PASS
if DEBUG:
    BREAK = BREAK


_config_inited = False

def read_config(path):
    #read config
    config=dict()
    try:
        print("Parsing config file (json)...")
        path=os.path.join(path)
        with open(path) as f:
            config = json.load(f)
    except Exception as inst:
        print(type(inst))
        print(inst.args)
        print(inst)
        return None
    finally:
        print("JSON succesfully parsed.")
        for section,cfg in config.items():
            print("{} : {}".format(section,cfg))
        #mod = sys.modules[self.__module__]
    
    return config

def config_init():
    global CONFIG, _config_inited
    if _config_inited: return
    CONFIG = read_config(CONFIG_FILE)
    _config_inited=True

CONFIG = read_config(CONFIG_FILE)
_config_inited=True


class GameConfig:
    __instance = None

    game_mode_def = GAME_START_MODE
    game_mode_cur = GAME_START_MODE

    def __init__(self):
        if not GameConfig.__instance:
            print("GameConfig  __init__ method called..")
        else:
            print("GameConfig Instance already created:", self.getInstance())

    @classmethod
    def getInstance(cls):
        if not cls.__instance:
            cls.__instance = GameConfig()
        return cls.__instance

    @classmethod
    def get_game_mode_default(cls):
        obj = cls.getInstance()
        if not obj:
            return None
        return obj.game_mode_def

    @classmethod
    def get_game_mode(cls):
        obj = cls.getInstance()
        if not obj:
            return None
        return obj.game_mode_cur

    @classmethod
    def set_game_mode_default(cls, mode):
        obj = cls.getInstance()
        if not obj:
            return None
        obj.game_mode_def = mode
        obj.game_mode_cur = mode

    @classmethod
    def set_game_mode_cur(cls, mode):
        obj = cls.getInstance()
        if not obj:
            return None
        obj.game_mode_cur = mode


